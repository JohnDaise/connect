{"version":3,"sources":["Components/Cell.js","Components/Row.js","App.js","serviceWorker.js","index.js"],"names":["Cell","value","columnIndex","play","color","className","onClick","Row","row","map","cell","i","key","App","props","getRandomNum","Math","floor","random","computerMove","board","state","randomMove","firstCheck","checkAll","secondCheck","checkAlmost","blockingMoves","winningMove","console","log","player1","setState","gameOver","message","length","finalMoveCol","r","player2","BLOCK","currentPlayer","togglePlayer","result","c","this","initBoard","push","checkVertical","checkAlmostHorizontal","checkAlmostVertical","checkDiagonalRight","checkDiagonalLeft","checkHorizontal","checkDraw","Container","textAlign","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33ba9ef1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = ({ value, columnIndex, play }) => {\n    let color = 'white';\n    if (value === 1) {\n      color = 'red';\n    } else if (value === 2) {\n      color = 'yellow';\n    }\n      \n    return (\n      <td>\n        <div className=\"cell\" \n            onClick={() => {\n              play(columnIndex);\n              }}>\n          <div className={color}></div>\n        </div>\n      </td>\n    );\n  };\n\n\nexport default Cell;","import React from 'react';\n\nimport Cell from './Cell';\n\nconst Row = ({ row, play }) => {\n    return (\n      <tr>\n        {row.map((cell, i) => <Cell key={i} value={cell} columnIndex={i} play={play} />)}\n      </tr>\n    );\n  };\n\nexport default Row;","import React from 'react';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Row from './Components/Row';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n    this.state = {\n      blockingMoves: [],\n      board: [],\n      currentPlayer: null,\n      gameOver: false,\n      message: '',\n      player1: 1,\n      player2: 2,\n      winningMove: []\n    };\n  }\n\n  componentDidMount(){\n    this.initBoard(); \n  }\n  \n  // Starts new game\n  initBoard() {\n    // Create a blank 6x7 matrix\n    let board = [];\n    for (let r = 0; r < 6; r++) {\n      let row = [];\n      for (let c = 0; c < 7; c++) { row.push(null) }\n      board.push(row);\n    }\n    \n    this.setState({\n      board,\n      currentPlayer: this.state.player1,\n      gameOver: false,\n      message: ''\n    });\n  }\n\n  getRandomNum = (() => {\n    return Math.floor(Math.random() * 7);\n  });\n \n\n  computerMove = () => {\n    let board = this.state.board;\n    let randomMove = this.getRandomNum();\n    \n    // if column is full then choose a different randomNum\n    if (!board[0][randomMove]){\n // TEST horiz win\n    let firstCheck = this.checkAll(board);\n    let secondCheck = this.checkAlmost(board);\n    let blockingMoves = this.state.blockingMoves;\n    let winningMove = this.state.winningMove;\n    \n    console.log('blockingMoves', blockingMoves);\n    console.log('winningMove', winningMove);\n    // check where row or col or diagonal has 3 pieces\n    \n    if (firstCheck === this.state.player1) {\n      this.setState({ board, gameOver: true, message: 'Player 1 (red) wins!' });\n      return;\n    }  \n\n\n    if(winningMove.length > 0) { \n      let finalMoveCol = winningMove[0]['c'];\n       for (let r = 5; r >= 0; r--) {\n        if (!board[r][finalMoveCol]) {\n          board[r][finalMoveCol] = this.state.player2;\n          break;\n        }\n      }\n      this.setState({ winningMove: []});\n      this.checkAll(board);\n     }\n\n  \n\n\n  if (secondCheck === this.state.player1) {\n\n    // for(let i = 0; i<winningMove.length; i++){\n    //   let row = winningMove[i]['r'];\n    //   let col = winningMove[i]['c'];\n    //   board[row][col] = this.state.player2;\n    //   break;\n    // }\n\n    BLOCK:\n      for (let i=0; i<blockingMoves.length; i++) {\n        if (blockingMoves[i]['c']) {\n          for (let r = 5; r >= 0; r--) {\n            if (!board[r][blockingMoves[i]['c']]) {\n              board[r][blockingMoves[i]['c']] = this.state.player2;\n              break BLOCK;\n            }\n          }\n        }\n      }\n      \n      this.setState({ blockingMoves:[], winningMove: [], board, currentPlayer: this.togglePlayer() });\n      return;\n    } \n\n    // TODO: RANDOM COMPUTER MOVE\n\n      for (let r = 5; r >= 0; r--) {\n        if (!board[r][randomMove]) {\n          board[r][randomMove] = this.state.player2;\n          break;\n        }\n      }\n\n\n    // checks result after move\n    let result = this.checkAll(board);\n  \n    if (result === this.state.player2) {\n      this.setState({ board, gameOver: true, message: 'Computer wins!' });\n    }\n\n    if (result === 'draw') {\n      this.setState({ board, gameOver: true, message: 'Draw game.' });\n    } \n\n    \n\n    if(this.state.gameOver) {\n      return;\n    }\n    \n    this.setState({ blockingMoves:[], board, currentPlayer: this.togglePlayer() });\n    // end of computerMove\n  } else {\n    this.computerMove();\n  }\n  }\n  \n  togglePlayer() {\n    return (this.state.currentPlayer === this.state.player1) ? this.state.player2 : this.state.player1;\n  }\n\n\n  \n  play = (c) => {\n    if (!this.state.gameOver) {\n      // Place piece on board\n      let board = this.state.board;\n  \n      for (let r = 5; r >= 0; r--) {\n        if (!board[r][c]) {\n          board[r][c] = this.state.player1;\n          break;\n        }\n      }\n      \n      // Check status of board\n      let result = this.checkAll(board);\n      if (result === this.state.player1) {\n        this.setState({ board, gameOver: true, message: 'Player 1 (red) wins!' });\n      }  \n      \n      if (result === 'draw') {\n        this.setState({ board, gameOver: true, message: 'Draw game.' });\n      } \n\n      this.setState({ board, currentPlayer: this.togglePlayer() });\n      this.computerMove(board);\n      \n    } else {\n      this.setState({ message: 'Game over. Please start a new game.' });\n    }\n  }\n\n\n  \n  checkVertical(board) {\n    // Check only if row is 3 or greater\n    for (let r = 3; r < 6; r++) {\n    for (let c = 0; c < 7; c++) {\n        if (board[r][c]) {\n          if ((board[r][c] === board[r - 1][c]) &&\n              (board[r][c] === board[r - 2][c]) &&\n              (board[r][c] === board[r - 3][c])) {\n            return board[r][c];    \n          }\n        }\n      }\n    }\n  }\n\n  checkAlmostVertical() {\n    let blockingMoves = this.state.blockingMoves;\n    let winningMove = this.state.winningMove;\n    let board = this.state.board;\n   \n    for (let r = 3; r < 6; r++) {  \n    for (let c = 0; c < 7; c++) {\n        if (board[r][c]) {\n          if((board[r][c] === board[r-1][c]) && \n             (board[r][c] === board[r-2][c]) && \n             !board[r-3][c]) {\n             // vertical win scenario\n            if (board[r][c] === 2) {\n              winningMove.push({r:r-3, c:c});\n              return board[r][c];\n            } \n\n            if (board[r][c] === 1) {\n              console.log('check 1');\n              blockingMoves.push({r:r-3, c:c});\n              return board[r][c];\n            } \n\n          }\n        }\n      }      \n    }\n    this.checkVertical(board); \n  \n  }\n  \n  checkHorizontal(board) {\n    // Check only if column is 3 or less\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r][c + 1] && \n              board[r][c] === board[r][c + 2] &&\n              board[r][c] === board[r][c + 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkAlmostHorizontal() {\n    // Check only if column is 3 or less\n    let blockingMoves = this.state.blockingMoves;\n    let winningMove = this.state.winningMove;\n    let board = this.state.board;\n\n    // loop to look for winning moves\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (!!board[r][c] && (board[r][c] === 2)) {\n          // checks for a horizontal pair\n          if(board[r][c] === board[r][c+1]) {\n            if( !board[r][c+2] && (board[r][c+3] === board[r][c])) {\n              winningMove.push({r:r, c:c+2});\n              return board[r][c]; \n            }  \n            \n            if ((board[r][c+2] === board[r][c]) && (!board[r][c+3])) {\n              if (c <= 3) {\n                winningMove.push({r:r, c:c+3});\n                return board[r][c]; \n              }\n              if (c === 4) {\n                winningMove.push({r:r, c:c-1});\n                return board[r][c]; \n              }\n            }  \n            if (!board[r][c-1] && (board[r][c-2] === board[r][c])) {\n              if(c>=2) {\n                winningMove.push({r:r, c:c-1});\n                return board[r][c]; \n              }\n            } \n            \n            if ((board[r][c-1] === board[r][c]) && !board[r][c-2]) {\n              if(c>=2) {\n                winningMove.push({r:r, c:c-2});\n              return board[r][c]; \n              }\n            }\n            // horizontal block scenarios\n            // one above pair is null // two above is board[r][c]\n            // one above is board[r][c] and two above is null\n            // one below is null // two below is board[r][c]\n            // one below is board[r][c] and two below is null\n          }\n      }\n     }\n    }\n\n  // loop to look for blocks\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (!!board[r][c] && (board[r][c] === 1)) {\n          // checks for a horizontal pair\n          if(board[r][c] === board[r][c+1]) {\n            if( !board[r][c+2] && (board[r][c+3] === board[r][c])) {\n              blockingMoves.push({r:r, c:c+2});\n              return board[r][c]; \n            }  \n            \n            if ((board[r][c+2] === board[r][c]) && (!board[r][c+3])) {\n              if (c <= 3) {\n                blockingMoves.push({r:r, c:c+3});\n                return board[r][c]; \n              }\n              if (c === 4) {\n                blockingMoves.push({r:r, c:c-1});\n                return board[r][c]; \n              }\n            }  \n            if (!board[r][c-1] && (board[r][c-2] === board[r][c])) {\n              if(c>=2) {\n                blockingMoves.push({r:r, c:c-1});\n                return board[r][c]; \n              }\n            } \n            \n            if ((board[r][c-1] === board[r][c]) && !board[r][c-2]) {\n              if(c>=2) {\n              blockingMoves.push({r:r, c:c-2});\n              return board[r][c]; \n              }\n            }\n            // horizontal block scenarios\n            // one above pair is null // two above is board[r][c]\n            // one above is board[r][c] and two above is null\n            // one below is null // two below is board[r][c]\n            // one below is board[r][c] and two below is null\n          }\n      }\n     }\n    }\n  }\n  \n  checkDiagonalRight(board) {\n    // Check only if row is 3 or greater AND column is 3 or less\n    for (let r = 3; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c + 1] &&\n              board[r][c] === board[r - 2][c + 2] &&\n              board[r][c] === board[r - 3][c + 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkAlmostDiagonalRight(board) {\n    // TODO: create check for 3 in row diagonal right\n  }\n  \n  checkDiagonalLeft(board) {\n    // Check only if row is 3 or greater AND column is 3 or greater\n    for (let r = 3; r < 6; r++) {\n      for (let c = 3; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c - 1] &&\n              board[r][c] === board[r - 2][c - 2] &&\n              board[r][c] === board[r - 3][c - 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkAlmostDiagonalLeft(board) {\n    // TODO: create check for 3 in row diagonal left\n  }\n  \n  checkDraw(board) {\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c] === null) {\n          return null;\n        }\n      }\n    }\n    return 'draw';    \n  }\n\n  checkAlmost() {\n    let board = this.state.board;\n    return this.checkAlmostHorizontal(board) || this.checkAlmostVertical(board);\n    // || this.checkAlmostDiagonalRight(board) || this.checkAlmostDiagonalLeft(board);\n  }\n  \n  checkAll(board) {\n    return this.checkVertical(board) || this.checkDiagonalRight(board) || this.checkDiagonalLeft(board) || this.checkHorizontal(board) || this.checkDraw(board);\n  }\n  \n  // componentWillMount() {\n  //   this.initBoard();\n  // }\n  \n  render() {\n    return (\n      <Container textAlign=\"center\">\n        <h1>CONNECT FOUR</h1> \n        <table>\n          <thead>\n          </thead>\n          <tbody>\n            {this.state.board.map((row, i) => (<Row key={i} row={row} play={this.play} computerMove={this.computerMove} />))}\n          </tbody>\n        </table>\n        <br></br>\n        {/* <Button size=\"massive\" onClick={() => {this.initBoard()}}>New Game</Button> */}\n        <button onClick={() => {this.initBoard()}}>New Game</button>\n        <br></br>\n        <p className=\"message\">{this.state.message}</p>\n      </Container>\n    );\n  }\n}\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}